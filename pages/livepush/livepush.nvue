<template>
	<div>
		<view :style="{ width: width + 'px', height: height + 'px' }" v-if="markact" class="mark"><text class="mark-text">直播启动中...</text></view>
		<view>
			<view @click="stopLive" class="arrow-box"><text class="jiesu">结束直播</text></view>
			<!--view class="arrow-boxs">
				<image class="user-img" src="http://yw.wtvxin.com/static/logo.png"></image>
				<view>
					<text class="text-box">8 关注</text>
				</view>
			</view> -->

			<live-pusher :beauty="beauty" 
			:style="{ width: width + 'px', height: (height + 1) + 'px' }" 
			id="livePusher" :url="url" mode="SD"
			@statechange="statechange" @netstatus="netstatus" @error="error"
			></live-pusher>

			<!-- 这是聊天室 -->
			<view class="nlv-footToolbar">
				<!-- 滚动msg信息 -->
				<scroll-view class="nlv-rollMsgPanel" scroll-y show-scrollbar="false" :scroll-into-view="'a'+scrollTop">
					<block v-for="(msgitem, msgidx) in strArr" :key="msgidx">
						<view class="nlv-msglist" :id="'a'+msgitem.Id">
							<view class="msg_bg">
								<text class="msg_name">{{msgitem.name}}:</text> 
								<text class="msg_text">{{msgitem.Info}}</text>
							</view>
						</view>
					</block>
				</scroll-view>
			</view>

			<!-- 这是功能按钮 -->
			<view :style="{ width: width + 'px' }" class="but">
				<view class="meiyanbut" v-if="liveType*1" @click="showProList">
					<image class="but-img pro" src="/static/icons/product-icon.png" mode="widthFix"></image>
					<text class="but-text">宝贝</text>
				</view>
				<view @click="openmeiyan" class="meiyanbut">
					<image class="but-img" src="http://www.sc-mall.net/static/meiyan.png"></image>
					<text v-if="beauty == 0" class="but-text">开启美颜</text>
					<text v-if="beauty == 9" class="but-text">关闭美颜</text>
				</view>
				<view @click="switchCamera" class="meiyanbut">
					<image class="but-img" src="http://www.sc-mall.net/static/qiehuan.png"></image>
					<text class="but-text">切换摄像头</text>
				</view>
			</view>
		</view>
		<uni-popup type="bottom" ref="proList">
			<proList :list="proList" @confirm="recommendPro"></proList>
		</uni-popup>
		<div class="popGift" v-if="PopGiftImg&&showPopGift">
			<image :src="PopGiftImg" alt="" mode="widthFix" id="giftpop" class="giftpop"
			 :style="{'margin-left':scale+'upx'}">
		</div>
	</div>
</template>

<script>
import { host, post, get, wssHost,toLogin } from '@/common/util.js';
import permision from '@/common/permission.js';
import uniPopup from '@/components/uni-popup/uni-popup.vue';
import proList from '../liveplay/proList.vue';
export default {
	components: {
		uniPopup,proList
	},
	data() {
		return {
			type: '',
			width: '',
			height: '',
			userId: '',
			token: '',
			url: '', //这是推流地址
			context: null,
			markact: true,
			beauty: 0,
			showgoodsbox: false,//商品展示
			SocketTask:null,
			socketStatus:false,
			liveErrNum:0,
			strArr:[
				{name:'系统提示',Info:'开始直播'},
			],//弹幕列表
			Signature:"",// 获取WebSocketId 用于身份验证
			TimeStamp:"",
			SecretKey:"",
			scrollTop:2000,//滚动到底部
			liveType:0, //直播类型。0--舞者;1--店铺
			proList:[],//产品列表
			xintiao:null,
			showPopGift:false,//显示送礼的动画
			PopGiftImg:'',
			scale:-300,
			scaleTime:null,
		};
	},
	onLoad(e){
		this.liveType = e.type; //直播类型。0--舞者;1--店铺
		this.userId = uni.getStorageSync('userId');
		this.token = uni.getStorageSync('token');
		this.getProList();//获取产品列表，判断是否为店铺直播
	},
	onShow() {
		this.userId = uni.getStorageSync('userId');
		this.token = uni.getStorageSync('token');
		let res = uni.getSystemInfoSync();
		this.width = res.windowWidth;
		this.height = res.windowHeight;
		console.log('this.height搞',this.height)
		//权限设置,获取权限后开启直播
		this.quanxian();
	},
	methods: {
		// 判断是否已开启权限
		async quanxian() {
			let platform = uni.getSystemInfoSync()&&uni.getSystemInfoSync().platform;
			
			switch (uni.getSystemInfoSync().platform) {
				case 'android':
					var result = await permision.requestAndroidPermission('android.permission.CAMERA');
					var res = await permision.requestAndroidPermission('android.permission.RECORD_AUDIO');
					console.log(res, 123456);
					var strStatus;
					if(result == 1 && res == 1){//已经获取授权开始直播
						console.log("开始直播")
						this.getPlay();
					}else if (result == 1 && res !== 1) {
						uni.showToast({
							title: '麦克风未授权',
							icon: 'none',
							success() {
								// permision.gotoAppPermissionSetting();
							}
						});
						this.stopLive();
					} else if (result == 0) {
						uni.showToast({
							title: '摄像头未授权',
							icon: 'none',
							success() {
								// permision.gotoAppPermissionSetting();
							}
						});
						this.stopLive();
					} else if (result == -1) {
						this.stopLive();
						uni.showToast({
							title: '被永久拒绝权限',
							icon: 'none',
							success() {
								
							}
						});
						setTimeout(function(){
							uni.switchTab ({
								url:'/pages/tabBar/my/my'
							})
						},1500)
					}

					break;

				case 'ios':
					var iosresult = await permision.judgeIosPermission('camera');
					var iosres = await permision.judgeIosPermission('record');
					console.log('运行iOS上',iosresult,iosres);
					var strStatus;
					if(iosresult&& iosres){//已经获取授权开始直播
						console.log("开始直播")
						this.getPlay();
					}else if ((!iosres)&&(!iosresult)) {
						uni.showModal({  
							content: '请先开启摄像头和麦克风权限后再开启直播！',  
							confirmText: '设置',  
							success: res => {  
								if(res.confirm) {  
									plus.runtime.openURL('app-settings://')  
								} else {  
									uni.navigateBack({  
										delta: 1  
									})  
								}  
							}  
						}); 
					} else if (!iosresult) {
						uni.showModal({  
							content: '需要访问您的相机，请到设置里开启',  
							confirmText: '设置',  
							success: res => {  
								if(res.confirm) {  
									plus.runtime.openURL('app-settings://')  
								} else {  
									uni.navigateBack({  
										delta: 1  
									})  
								}  
							}  
						}); 
					}else{
						uni.showModal({  
							content: '麦克风未授权，请到设置里开启',  
							confirmText: '设置',  
							success: res => {  
								if(res.confirm) {  
									plus.runtime.openURL('app-settings://')  
								} else {  
									uni.navigateBack({  
										delta: 1  
									})  
								}  
							}  
						}); 
					}
				break;
			}
		},
		// *********************直播***************
		// 开始直播
		async getPlay() {
			this.livemessage()// 开启实时聊天
			// 获取直播列表
			let res = await post('TencentCloud/PushURL', {
				// push: '',
				UserId: this.userId,
				Token: this.token,
				pType:this.liveType//0--舞者;1--店铺
			});
			console.log(res)
			if (res.code == 0) {
				this.url = res.data.RTMP;
				this.context = uni.createLivePusherContext('livePusher', this);
				console.log('准备开启直播',JSON.stringify(this.context))
				setTimeout(() => {
					this.startLive();
				}, 1000);
			} else if(res.code == 2){
				uni.setStorageSync('token', '');
				uni.setStorageSync('userId', '');
				uni.showToast({
					title: "请重新登录商家直播账号",
					icon: 'none',
					duration: 2000
				});
				setTimeout(function() {
					uni.navigateBack({});
				}, 2000);
			} else {
				uni.setStorageSync('token', '');
				uni.setStorageSync('userId', '');
				uni.showToast({
					title: res.msg,
					icon: 'none',
					duration: 2000
				});
				setTimeout(function() {
					uni.navigateBack({});
				}, 2000);
			}
		},
		startLive() {
			let _this = this;
			this.context.start({
				success: a => {
					_this.markact = false;
					console.log('livePusher.start:' + JSON.stringify(a));
				}
			});
		},
		// 结束直播弹窗
		stopLive() {
			const that = this;
			uni.showModal({
				title:'是否结束直播！',
				success(res){
					if(res.confirm){
						// that.returns()
						uni.navigateBack();
					}
				}
			})
		},
		// 结束直播
		returns() {
			console.log('准备关闭直播',JSON.stringify(this.context));
			if(!this.context) return;
			console.log('准备关闭直播2',JSON.stringify({
				UserId: this.userId,
				Token: this.token
			}));
			this.xintiao&&clearInterval(this.xintiao)
			// post('TencentCloud/PushCallBack').then(res=>{
			// 	console.log('关闭直播请求成功res',JSON.stringify(res))
			// }).catch(err=>{
			// 	console.log('关闭直播请求成功err',JSON.stringify(err))
			// })
			this.context.stop({
				success: a => {
					console.log(JSON.stringify(a),'页面卸载');
				},fail:(e)=>{
					console.log('关闭直播请求err',JSON.stringify(e))
				}
			});
		},
		// 开启美颜
		openmeiyan() {
			if (this.beauty == 0) {
				this.beauty = 9;
			} else {
				this.beauty = 0;
			}
		},
		
		// 切换摄像头
		switchCamera() {
			this.context.switchCamera({
				success: a => {
					console.log('livePusher.switchCamera:' + JSON.stringify(a));
				}
			});
		},
		statechange(e){
			console.log('状态变化事件',JSON.stringify(e))
			// if(e.detail.code==1008){
			// 	this.returns();
			// }
		},
		netstatus(e){
			console.log('网络状态通知',JSON.stringify(e))
		},
		errror(e){
			console.log('渲染错误事件',JSON.stringify(e))
		},
		
		// *****************直播end*****************
		// 获取WebSocketId 用于身份验证
		async livemessage(){
			let res =await post('User/GetWebSocketId',{
				UserId: this.userId,
				Token: this.token,
				Type: this.liveType,
				ToMemberId:this.userId
			})
			console.log('连接socket',res)
			if(res.code) return;
			this.Signature=res.data.Signature
			this.TimeStamp=res.data.TimeStamp
			this.SecretKey=res.data.SecretKey
			this.connectSocket()
		},
		// 打开webSocket链接登录验证
		async connectSocket(){
			let that =this
			console.log(this.Signature,'this.Signature')
			console.log(wssHost+'/LiveRoomServer.ashx?Signature='+this.Signature,'this.Signature')
			this.SocketTask=uni.connectSocket({
			    url:wssHost+'/LiveRoomServer.ashx?Signature='+this.Signature,
				success:()=>{}
			})
			
			this.SocketTask.onOpen(res => {
				// console.log("open", res);
				this.socketStatus = true;
				let data=this.LoginData(1,this.TimeStamp,this.SecretKey)
				this.SocketTask.send({data:JSON.stringify(data)})
				console.log("发送数据",data);
				this.xintiao&&clearInterval(this.xintiao)
				//心跳连接
				this.xintiao = setInterval(()=>{ 
					console.log('发送了一次心跳测试')
					that.pushMsg('ping')
				},100000)
			});
			this.onMessage()
			this.SocketTask.onError(function (res) {
				uni.showModal({title:'WebSocket连接已断开，尝试重新连接'+this.liveErrNum});
				// 如果没超过20次就重新连接
				if(this.liveErrNum<20){
					this.liveErrNum+=1;
					this.livemessage();
				}
			});
			this.SocketTask.onClose(close => {
				console.log("close", close);
				uni.showModal({title:'WebSocket连接已断开'+this.SocketTask});
				if(this.liveErrNum<99){
					this.liveErrNum+=1;
					this.connectSocket()
				}
				this.socketStatus = false;
			});
		},
		//接收消息
		onMessage(){
			let msg
			let that=this
		
			this.SocketTask.onMessage(r => {
				msg=JSON.parse(r.data)
				console.log(msg,'收到的消息')
				if(msg.code==1){
					
				}else if(msg.code==3||msg.code==0){
					let obj=JSON.parse(msg.data.Id)
					console.log(obj,987)
					if(obj.Info!=='ping'){
						that.strArr.push(obj);
						if(obj.type==3){
							that.PopGiftImg = obj.content;
							this.animations();
						}
					}else{
						console.log('接收了一次心跳测试')
					}
					console.log('arr',that.strArr)
					this.$nextTick(function(){//等最新一条消息dom更新，滚动到底部
						// that.scrollTop=this.scrollTop+50;
						// that.scrollTop = '';
						that.scrollTop = that.strArr[that.strArr.length-1].Id;
						
					})
				}else if(msg.code==2){//连接断开，重新连接
					uni.showModal({title:'WebSocket连接已断开，onMessage'});
					// let data=that.LoginData(1,that.TimeStamp,that.SecretKey)
					// that.SocketTask.send({data:JSON.stringify(data)})
					// uni.showToast({
					// 	title:'正在重连请稍等...',
					// 	icon:'none'
					// })
				}
			})
		},
		LoginData(MsgType, TimeStamp, SecretKey) {//登录数据
			let data = {
				MsgType:MsgType, //咨询者还是回答者
				TimeStamp:TimeStamp,
				SecretKey:SecretKey
			}
			// console.log(data)
			return data;
		},
		// 推送一条消息
		pushMsg(text,name=''){
			let sendData = {
				MsgType:3,
				Id:JSON.stringify({
					Id:new Date().getTime(),
					Info:text,
					name:name||'系统提示'
				}),
				Info:text,
			}
			this.SocketTask.send({ data: JSON.stringify(sendData) });
		},
		//******************产品*******************************
		// 获取产品列表
		async getProList(){
			if(!this.liveType*1)return;
			const res = await post('Goods/GetGoodsListByM',{
				UserId:this.userId,
				Token:this.token
			})
			if(!toLogin())return;
			if(res.code)return;
			res.data.map(item=>{
				item.confirmText='推荐商品';
			})
			console.log(res.data,'获取到的产品列表')
			this.proList = res.data;
		},
		//显示产品列表
		showProList(){
			this.$refs.proList.open();
		},
		// 推荐商品
		async recommendPro(item){
			console.log(item,'推荐商品')
			const res = await post('Goods/SetProductIsR',{
				UserId:this.userId,
				Token:this.token,
				proId:item.Id,
				})
			if(res.code)return;
			uni.showToast({
				title:res.msg,
				icon:'none'
			})
			let data = {
				MsgType:3,
				Id:JSON.stringify({
					Id:new Date().getTime(),
					Info:'主播'+item.confirmText+'<'+item.Name+'>',
					name:'系统消息'
				}),
				Info:item.Name,
			}
			this.SocketTask.send({ data: JSON.stringify(data) });
			if(item.confirmText=='取消推荐'){
				item.confirmText ='推荐商品';
			}else{
				item.confirmText ='取消推荐';
			}
		},
		// 送礼动画
		animations(){
			this.showPopGift = true;
			this.scale = -300;
			this.scaleTime = setInterval(()=>{
				if(this.scale>200){
					clearInterval(this.scaleTime)
					setTimeout(()=>{
						this.scaleTime = setInterval(()=>{
							if(this.scale>750){
								this.showPopGift = false;
								clearInterval(this.scaleTime)
							}else{
								this.scale += 20;
							}
						},8)
					},1500)
				}else{
					this.scale += 20;
				}
			},8)
		},
		
	},
	// 页面卸载
	onUnload(){
		console.log('直播onUnload')
		this.xintiao&&clearInterval(this.xintiao)
		this.returns();
	},
	onHide(){
		console.log('直播onHide')
	}
};
</script>

<style scoped lang="scss">
.but-img {
	width: 45upx;
	height: 45upx;
}
.meiyanbut {
	flex: 1;
	padding: 10px 20px 10px 20px;
	/* margin-left: 20px; */
	display: flex;
	align-items: center;
	justify-content: center;
	flex-direction: column;
	.pro{
		width:50upx;
	}
}
.but-text {
	padding-top: 3px;
	font-size: 13px;
	color: white;
}
.text-box {
	font-size: 12px;
	color: white;
}
.user-img {
	margin-right: 16upx;
	width: 50upx;
	height: 50upx;
	border-radius: 50%;
}
.mark-text {
	color: white;
	font-size: 28upx;
}
.mark {
	position: fixed;
	top: 0px;
	background-color: #000000;
	display: flex;
	align-items: center;
	justify-content: center;
	flex-direction: column;
}
.but {
	background-color: rgba(0, 0, 0, 0.4);
	position: fixed;
	bottom: 0px;
	display: flex;
	align-items: center;
	justify-content:space-between;
	flex-direction: row;
	border: none;
}
.arrow-box {
	position: fixed;
	top: 60upx;
	left: 40upx;
	z-index: 10;
	border-radius: 20px;
	background-color: rgba(0, 0, 0, 0.4);
}
.arrow-boxs {
	padding: 10upx 20upx;
	display: flex;
	align-items: center;
	flex-direction: row;
	position: fixed;
	top: 60upx;
	right: 40upx;
	z-index: 10;
	border-radius: 30px;
	background-color: rgba(0, 0, 0, 0.4);
}
.jiesu {
	padding: 20upx;
	color: white;
	font-size: 28upx;
}
.nlv-footToolbar{
	position: absolute;
	width: 750upx;
	bottom: 66px;
	left: 0;
	right: 0;
	padding: 20upx;
}
.nlv-rollMsgPanel{
	height: 600upx;
	
}
.nlv-msglist{
	// margin-bottom: 10px;
	// flex-direction: row;
	// display: flex;
	width:750upx;
	margin-bottom:5upx;
}
.msg_bg{
	display: inline-block;
	flex-direction: row;
	flex-wrap:wrap;
	align-items:flex-start;
	justify-content: flex-start;
	background-color: rgba(0,0,0,.4);
	border-radius: 12upx;
	padding: 10upx 10upx;
	line-height: 1.2;
	max-width:500upx;
	height: auto;
}
.msg_name{ color:#F0AD4E;  margin-right: 10upx;font-size: 28upx;
	display:inline-block;
}
.msg_text{ color:#fff;font-size: 28upx;
	word-wrap: break-word;
	word-break: break-all;
    word-break: normal;
	display:inline-block;
	max-width:490upx;
	}
.nlv-msglist::after{
	display: block;
	content:"";
	width: 100%;
}

	.popGift{
		position:fixed;
		top:300upx;left:0;
		width:750upx;
		height:1000upx
	}
		.giftpop{
			position:relative;
			width:300upx;
			display:block;
			transform:scale(1);
			transition-duration:2000; 
			animation:gifypop 2000 infinite;
			animation-name:gifypop;
			animation-duration:2000;
			animation-iteration-count:3;
		}
	@keyframes gifypop {
		0% {
			margin-left:-300upx;
			transform:skewX(-20deg);
		}
		10% {
			margin-left:-225upx;
			transform:skewX(-30deg);
		}
		30% {
			margin-left:-225upx;
			transform:skewX(0deg);
		}
		
		40% {transform:skewX(30deg);
			margin-left:225upx;}
		50% {transform:skewX(-30deg);
			margin-left:225upx;}
		60% {transform:skewX(30deg);
			margin-left:225upx;}
		70% {transform:skewX(0deg);
			margin-left:225upx;}
		90% {
			transform:skewX(0deg);
			
			margin-left:225upx;}
		100% {
			margin-left:750upx;
			transform:skewX(20deg);
		}
	}
</style>
